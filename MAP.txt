DEVELOPMENT STEPS (USIG WINDOWS AS OS)
---------------------------------------
(you'll need to have PHP installed and have the PATH for PHP configured)
-1. https://getcomposer.org/download/ - Download and run Composer-Setup.exe
-2. https://symfony.com/download - download and run setup.exe
-3. open a CLI(e.g. cmd, git bash, etc) and run "symfony new --full themill" in your folder of preference(in my case in "C:\wamp64\www\projects")
-4. install the dependencies for creating the react app:
		-https://nodejs.org/en/ - download and install node LTS(i also checked "Automatically install the necessary tools..." and installed those requirements as well - necessary for automatically compiling and building some node dependencies. you might get away with skipping this check, if the project doesn't need those type of dependencies)
		-https://www.npmjs.com/get-npm - nothing to do here, npm is installed automatically when you installed nodejs
-5. https://reactjs.org/docs/create-a-new-react-app.html#create-react-app - open a CLI, navigate to the project folder and run "npx create-react-app client"
-6. inside /client/package.json, in "scripts", i added the commands:
	"postbuild": "npm run upload",
		-postbuild is run automatically after you run "npm run build" - this will run the next "upload" command
    "upload": "cp build/index.html ../templates/build/ && cp -r build/*  ../public/",
		-"cp build/index.html ../templates/build/" - index.html is the compiled react app that we'll render in the controller methods
		-"cp -r build/*  ../public" - we copy all the /build files to the /public folder so the resources(css,js,images, all that) referenced in index.html can be accessed by symfony
			-symfony looks into the /public folder for all resources, so sth like "<script src="/static/js/main.9f4d2d26.chunk.js"></script>" will be accessed from the /public/static folder
	-i also created the /build folder inside /templates otherwise the "npm run postbuild" won't work
-7. in your CLI, navigate to the /client folder and run the following commands:
	"npm install typescript"
	"npm install node-sass"
	"npm install redux"
	"npm install react-redux"
	"npm install axios"
	"npm install redux-thunk"
	"npm install react-youtube"
	"npm install vimeo"
	"npm install @u-wave/react-vimeo"
	"npm install react-router-dom"
	"npm install react-modal"
	-then restart the frontent server, i.e. stop and re-run "npm start".
-8. https://developers.google.com/youtube
	https://developers.google.com/youtube/v3/getting-started (YouTube Data API)
-9. INSTAGRAM INTEGRATION
	-prerequisites
		(-you need to have a facebook account with https://developers.facebook.com/ enabled, obviously)
		-if you haven't already, make sure your symfony app, i.e. DefaultController:index() (or whichever MyController:method() you wanna use), loads the react built index.html app for the "/" route - this way we can access the built app when we start the symfony server
		-https://symfony.com/doc/current/setup/symfony_server.html#enabling-tls - needed for the oauth processes used by the Instagram API
			-in your CLI, in your project folder:
				-stop the "php bin/console server:run" server that i used so far
				-run "symfony server:ca:install"
				-run "symfony server:start" to run the symfony server with https
					-from this point on, we're not using "php bin/console server:run" anymore.
					-at this point we have the app running under "https://127.0.0.1:8000/" (or "https://localhost:8000/", that should work too)
	-https://developers.facebook.com/docs/instagram-basic-display-api/getting-started - follow these STEPS (i also saved this page in "doc/instagram_setup.html"). some notes on some of the steps:
		-Step 1: Create a Facebook App
			-set the website url to where our app is, i.e. "https://localhost:8000/" (make sure it is HTTPS)
		-Step 2: Configure Instagram Basic Display
			-Valid OAuth Redirect URIs: we HAVE TO set this to our website url i.e. 'https://localhost:8000/', because it will be used to get the authorization codes - basically it'll redirect to our app, so we can get the code from the GET parameter, from the query string
		-Step 3: Add an Instagram Test User
			-i also HAVE TO add https://www.instagram.com/millchannel/ as a tester so that when i finished development retrieving data from my own instagram account, the app can allow https://www.instagram.com/millchannel/ to login with their credentials, and have the app display their data on the app
-10. when you finish development for the project, in "client\src\redux\store.js" comment out the "window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()" so that the app will run on any browser, not just the browser that has the Redux Devtools installed